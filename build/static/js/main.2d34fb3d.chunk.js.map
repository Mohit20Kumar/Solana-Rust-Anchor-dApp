{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["window","Buffer","SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","concat","App","_useState","useState","_useState2","_slicedToArray","walletAddress","setWalletAddress","_useState3","_useState4","inputLink","setInputLink","_useState5","_useState6","inputDesc","setInputDesc","_useState7","_useState8","gifList","setGifList","checkIfWalletIsConnected","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","solana","response","wrap","_context","prev","next","isPhantom","console","log","connect","onlyIfTrusted","sent","publicKey","toString","alert","t0","error","stop","apply","arguments","connectWallet","_ref2","_callee2","_window2","_context2","onLinkInputChange","event","value","target","onDescInputChange","getProvider","connection","Connection","Provider","createGifAccount","_ref3","_callee3","provider","program","_context3","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","getProgram","_ref4","_callee4","_context4","fetchIdl","abrupt","_ref5","_callee5","account","_context5","fetch","useEffect","sendGif","_ref6","_callee6","_context6","length","addGif","onLoad","_ref7","_callee7","_context7","addEventListener","removeEventListener","_jsx","className","children","_jsxs","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","style","color","fontWeight","textTransform","gifDesc","marginTop","userAddress","substring","twitterLogo","href","rel","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d34fb3d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport \"./App.css\";\r\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\r\nimport idl from \"./idl.json\";\r\nimport { Buffer } from \"buffer\";\r\nimport kp from \"./keypair.json\";\r\nwindow.Buffer = Buffer;\r\n\r\n// SystemProgram is a reference to the Solana runtime!\r\nconst { SystemProgram } = web3;\r\n\r\n// Create a keypair for the account that will hold the GIF data.\r\nconst arr = Object.values(kp._keypair.secretKey);\r\nconst secret = new Uint8Array(arr);\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\r\n\r\n// This is the address of your solana program, if you forgot, just run solana address -k target/deploy/myepicproject-keypair.json\r\n// const programID = new PublicKey(\"8Qg7tD7ehMZfvPQrSiqiG8BpT1CeFxARSkwSzXfBBhpx\");\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl(\"devnet\");\r\n\r\n// Controls how we want to acknowledge when a transaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\",\r\n};\r\n// Constants\r\nconst TEST_GIFS = [\r\n  {\r\n    gifLink: \"https://media.giphy.com/media/3oxHQpJKupQXsmU1JS/giphy.gif\",\r\n    gifDesc: \"Marvel\",\r\n  },\r\n  {\r\n    gifLink: \"https://media.giphy.com/media/rj12FejFUysTK/giphy.gif\",\r\n    gifDesc: \"Marvel\",\r\n  },\r\n  {\r\n    gifLink: \"https://media.giphy.com/media/3o6QL31ZlTLXkW4NZS/giphy.gif\",\r\n    gifDesc: \"Marvel\",\r\n  },\r\n  {\r\n    gifLink: \"https://media.giphy.com/media/8lJwA6kNkKyfC/giphy.gif\",\r\n    gifDesc: \"Marvel\",\r\n  },\r\n  {\r\n    gifLink: \"https://media.giphy.com/media/dv01JuAyGK11zZKRv5/giphy.gif\",\r\n    gifDesc: \"Marvel\",\r\n  },\r\n  {\r\n    gifLink: \"https://media.giphy.com/media/yn0W0FsdTY5qM/giphy.gif\",\r\n    gifDesc: \"Marvel\",\r\n  },\r\n];\r\nconst TWITTER_HANDLE = \"mohit20k\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputLink, setInputLink] = useState(\"\");\r\n  const [inputDesc, setInputDesc] = useState(\"\");\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  /*\r\n   * This function holds the logic for deciding if a Phantom Wallet is\r\n   * connected or not\r\n   */\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log(\"Phantom wallet found!\");\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          console.log(\r\n            \"Connected with Public Key:\",\r\n            response.publicKey.toString()\r\n          );\r\n\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert(\"Solana object not found! Get a Phantom Wallet 👻\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  /*\r\n   * Let's define this method so our code doesn't break.\r\n   * We will write the logic for this next!\r\n   */\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  const onLinkInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputLink(value);\r\n  };\r\n  const onDescInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputDesc(value);\r\n  };\r\n\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection,\r\n      window.solana,\r\n      opts.preflightCommitment\r\n    );\r\n    return provider;\r\n  };\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      // const program = await getProgram();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      console.log(\"ping\");\r\n\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount],\r\n      });\r\n      console.log(\r\n        \"Created a new BaseAccount w/ address:\",\r\n        baseAccount.publicKey.toString()\r\n      );\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error creating BaseAccount account:\", error);\r\n    }\r\n  };\r\n\r\n  const getProgram = async () => {\r\n    // Get metadata about your solana program\r\n    const idl = await Program.fetchIdl(programID, getProvider());\r\n    console.log(\"idl\", idl);\r\n    // Create a program that you can call\r\n    return new Program(idl, programID, getProvider());\r\n  };\r\n\r\n  const getGifList = async () => {\r\n    try {\r\n      const program = await getProgram();\r\n      const account = await program.account.baseAccount.fetch(\r\n        baseAccount.publicKey\r\n      );\r\n\r\n      console.log(\"Got the account\", account);\r\n      setGifList(account.gifList);\r\n    } catch (error) {\r\n      console.log(\"Error in getGifList: \", error);\r\n      setGifList(null);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log(\"Fetching GIF list...\");\r\n      getGifList();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  const sendGif = async () => {\r\n    // if (inputLink.length > 0) {\r\n    //   console.log(\"Gif link:\", inputLink);\r\n    //   console.log(\"Gif desc:\", inputDesc);\r\n    //   const a = { gifLink: inputLink, gifDesc: inputDesc };\r\n    //   setGifList((current) => [...current, a]);\r\n    //   setInputLink(\"\");\r\n    //   setInputDesc(\"\");\r\n    // } else {\r\n    //   console.log(\"Empty input. Try again.\");\r\n    // }\r\n\r\n    if (inputLink.length === 0) {\r\n      console.log(\"No gif link given!\");\r\n      return;\r\n    }\r\n    if (inputDesc.length === 0) {\r\n      console.log(\"No gif desc given!\");\r\n      return;\r\n    }\r\n    setInputLink(\"\");\r\n    setInputDesc(\"\");\r\n    console.log(\"Gif link:\", inputLink);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      await program.rpc.addGif(inputLink, inputDesc, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        },\r\n      });\r\n      console.log(\"GIF successfully sent to program\", inputDesc);\r\n\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error);\r\n    }\r\n  };\r\n\r\n  /*\r\n   * We want to render this UI when the user hasn't connected\r\n   * their wallet to our app yet.\r\n   */\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className='cta-button connect-wallet-button'\r\n      onClick={connectWallet}>\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const renderConnectedContainer = () => {\r\n    if (gifList === null) {\r\n      return (\r\n        <div className='connected-container'>\r\n          <button\r\n            className='cta-button submit-gif-button'\r\n            onClick={createGifAccount}>\r\n            Do One-Time Initialization For GIF Program Account\r\n          </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className='connected-container'>\r\n          {/* Go ahead and add this input and button to start */}\r\n          <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault();\r\n              sendGif();\r\n            }}>\r\n            <input\r\n              type='text'\r\n              placeholder='Enter gif link!'\r\n              value={inputLink}\r\n              onChange={onLinkInputChange}\r\n            />\r\n            <br />\r\n            <input\r\n              type='text'\r\n              value={inputDesc}\r\n              onChange={onDescInputChange}\r\n              placeholder='Enter gif description!'\r\n            />\r\n            <br />\r\n            <button type='submit' className='cta-button submit-gif-button'>\r\n              Submit\r\n            </button>\r\n          </form>\r\n          <div className='gif-grid'>\r\n            {/* Map through gifList instead of TEST_GIFS */}\r\n            {gifList?.map((item, index) => (\r\n              <div className='gif-item' key={index}>\r\n                <img src={item.gifLink} alt={\"Marvel GIF\"} />\r\n                <p\r\n                  style={{\r\n                    color: \"white\",\r\n                    fontWeight: \"bold\",\r\n                    textTransform: \"capitalize\",\r\n                  }}>\r\n                  {item.gifDesc}\r\n                </p>\r\n                <p\r\n                  style={{\r\n                    color: \"white\",\r\n                    marginTop: \"0\",\r\n                    fontWeight: \"bold\",\r\n                  }}>\r\n                  Posted By :{\" \"}\r\n                  {item.userAddress.toString().substring(0, 8) + \"...\"}\r\n                </p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  /*\r\n   * When our component first mounts, let's check to see if we have a connected\r\n   * Phantom Wallet\r\n   */\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener(\"load\", onLoad);\r\n    return () => window.removeEventListener(\"load\", onLoad);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log(\"Fetching GIF list...\");\r\n\r\n      // Call Solana program here.\r\n\r\n      // Set state\r\n      setGifList();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <div className='App'>\r\n      {/* This was solely added for some styling fanciness */}\r\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\r\n        <div className='header-container'>\r\n          <p className='header'>GIF VERSE</p>\r\n          <p className='sub-text'>Marvel GIF Universe ✨</p>\r\n          {/* Add the condition to show this only if we don't have a wallet address */}\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n          {/* We just need to add the inverse here! */}\r\n          {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n        <div className='footer-container'>\r\n          <img alt='Twitter Logo' className='twitter-logo' src={twitterLogo} />\r\n          <a\r\n            className='footer-text'\r\n            href={TWITTER_LINK}\r\n            target='_blank'\r\n            rel='noreferrer'>{`catch me at @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}